# shared/docker-compose.yml
version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: cakus_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: cakus_admin
      MONGO_INITDB_ROOT_PASSWORD: cakus_password_2025
      MONGO_INITDB_DATABASE: cakus
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cakus_network

  # Backend Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cakus_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://cakus_admin:cakus_password_2025@mongodb:27017/cakus?authSource=admin
      JWT_SECRET: cakus_jwt_secret_key_2025_very_secure
      ML_API_URL: http://ml-api:8000
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      - mongodb
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - cakus_network

  # ML API FastAPI
  ml-api:
    build:
      context: ./ml-api
      dockerfile: Dockerfile
    container_name: cakus_ml_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      MONGODB_URL: mongodb://cakus_admin:cakus_password_2025@mongodb:27017/?authSource=admin
      DATABASE_NAME: cakus_ml
    volumes:
      - ./ml-api/models:/app/models
      - ./ml-api/data:/app/data
    depends_on:
      - mongodb
    networks:
      - cakus_network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cakus_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_ML_API_URL: http://localhost:8000
    depends_on:
      - backend
      - ml-api
    networks:
      - cakus_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cakus_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ml-api
    networks:
      - cakus_network

volumes:
  mongodb_data:

networks:
  cakus_network:
    driver: bridge